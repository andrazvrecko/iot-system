version: '3'
services: 
  #MQTT BROKERS
  mqtt:
    container_name: mqtt
    image: eclipse-mosquitto
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    ports:
      - 1883:1883
      - 9001:9001
  mqtt2:
    container_name: mqtt2
    image: eclipse-mosquitto
    volumes:
      - ./mosquitto/config2:/mosquitto/config
      - ./mosquitto/data2:/mosquitto/data
      - ./mosquitto/log2:/mosquitto/log
    ports:
      - 1884:1884
      - 9002:9002
  haproxy-loadbalancer:
    container_name: haproxy-load-balancer
    build: ./haproxy
    volumes:
      -  ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - 8080:8080
      - 1936:1936
    depends_on: 
      - mqtt
      - mqtt2
  #BRIDGE MQTT-KAFKA
  mqtt-kafka-bridge1:
    container_name: mqttkafkabridge1
    build: ./bridge
    volumes: 
      - ./bridge/example:/usr/app/example
      - ./bridge/lib:/usr/app/lib
      - ./bridge/index.js:/usr/app/index.js
    ports:
      - 3967:3967
    depends_on: 
      - mqtt
      - kafka1
      - kafka2
      - kafka3
    command: npm run test
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  mqtt-kafka-bridge2:
    container_name: mqttkafkabridge2
    build: ./bridge2
    volumes: 
      - ./bridge2/example:/usr/app/example
      - ./bridge2/lib:/usr/app/lib
      - ./bridge2/index.js:/usr/app/index.js
    ports:
      - 3968:3967
    depends_on: 
      - mqtt
      - kafka1
      - kafka2
      - kafka3
    command: npm run test
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  #KAFKA
  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.4.9
    hostname: zookeeper
    ports:
      - 2181:2181
    environment: 
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes: 
      - ./kafka/zookeeper/data:/data
      - ./kafka/zookeeper/datalog:/datalog
  kafka1:
    container_name: kafka1
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka1
    ports:
      - "9091:9091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  kafka2:
    container_name: kafka2
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka2
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 2
    volumes:
      - ./kafka/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zookeeper 
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  kafka3:
    container_name: kafka3
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka3
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  kafka-topics-creator:
    build: ./kafka-topics-creator
    container_name: kafka-topics-creator
    depends_on:
      - zookeeper
      - kafka1
    environment:
      ZOOKEEPER_HOSTS: "zookeeper:2181"
      KAFKA_TOPICS: "test-streams kafka-influx-bridge notification-output-test"
  # Kafka Streams App
  kafka-streams:
    container_name: streams_app
    build: ./streamsapp
    depends_on: 
      - kafka1
      - kafka2
      - kafka3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:19091"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
  influxdb:
    container_name: influxdb
    image: influxdb:2.0
    ports:
      - "8086:8086"
    volumes:
      - ./influxdb:/root/influxdbv2
  influxdb_cli:
    links:
      - influxdb
    image: influxdb:2.0
    entrypoint: influx setup --bucket iot -t WN7PYw6_RoC57mZj4RKM06OEmdvyDV9vKNKo9540INP34gsszq1voNHf_1WLSzmy4lNSkxJmKSYASDnCO87eyA== -o iot --username=admin --password=passwordpasswordpassword --host=http://influxdb:8086 -f
    restart: on-failure:10
    depends_on:
      - influxdb
  telegraf:
    container_name: telegraf
    image: telegraf
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      - //var/run/docker.sock:/var/run/docker.sock 
    depends_on: 
      - influxdb
      - kafka1
      - kafka2
      - kafka3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  backend_api:
    container_name: API
    build: ./backendapi
    ports:
      - 4000:4000
    depends_on: 
      - influxdb
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  frontend:
    container_name: frontend
    build: ./react_frontend
    ports:
      - 3000:3000
    depends_on: 
      - backend_api
  device-simulator:
    container_name: devicesimulator
    build: ./devicesimulator
    depends_on: 
      - frontend
    deploy:
      replicas: 1
  